from typing import Any, ClassVar, Tuple

from typing import overload

class BCOOStore(COOStore):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: COOStore, arg1, arg2: NodePartitions, arg3: PartitionType) -> None: ...
    def edge_pos(self, *args, **kwargs) -> Any: ...
    def subgraph(self, *args, **kwargs) -> Any: ...
    def __getitem__(self, idx: int) -> COOStore: ...
    @property
    def num_blocks(self) -> int: ...
    @property
    def psize(self) -> int: ...

class COOStore:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: TensorStore, arg1: int) -> None: ...
    @overload
    def __init__(self, arg0: TensorStore, arg1: TensorStore, arg2: int) -> None: ...
    def save(self, path: str) -> Tuple[int,TensorInfo,TensorInfo]: ...
    def slice(self, start: int, end: int) -> COOStore: ...
    def tensor(self, *args, **kwargs) -> Any: ...
    @property
    def metadata(self) -> Tuple[int,TensorInfo,TensorInfo]: ...
    @property
    def num_edges(self) -> int: ...
    @property
    def num_nodes(self) -> int: ...

class CSRStore:
    def __init__(self, arg0: TensorStore, arg1: TensorStore) -> None: ...
    def from_coo(self, *args, **kwargs) -> Any: ...
    def neighbors(self, *args, **kwargs) -> Any: ...
    def save(self, path: str) -> Tuple[int,TensorInfo,TensorInfo]: ...
    def tensor(self, *args, **kwargs) -> Any: ...
    @property
    def metadata(self) -> Tuple[int,TensorInfo,TensorInfo]: ...
    @property
    def num_edges(self) -> int: ...
    @property
    def num_nodes(self) -> int: ...

class NodePartitions:
    def __init__(self, *args, **kwargs) -> None: ...
    def assignments(self, *args, **kwargs) -> Any: ...
    def nodes(self, *args, **kwargs) -> Any: ...
    def pos(self, idx: int) -> int: ...
    def size(self, idx: int) -> int: ...
    def __getitem__(self, index) -> Any: ...
    @property
    def psize(self) -> int: ...

class PartitionType:
    __members__: ClassVar[dict] = ...  # read-only
    P_1D: ClassVar[PartitionType] = ...
    P_2D: ClassVar[PartitionType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TensorInfo:
    def __init__(self) -> None: ...
    def with_dtype(self, dtype: object) -> TensorInfo: ...
    def with_offset(self, arg0: int) -> TensorInfo: ...
    def with_path(self, arg0: str) -> TensorInfo: ...
    def with_shape(self, arg0) -> TensorInfo: ...
    @property
    def dtype(self) -> object: ...
    @property
    def offset(self) -> int: ...
    @property
    def path(self) -> str: ...
    @property
    def shape(self) -> Any: ...

class TensorStore:
    def __init__(self) -> None: ...
    def element_size(self) -> int: ...
    def flatten(self) -> TensorStore: ...
    def gather(self, *args, **kwargs) -> Any: ...
    def reshape(self, new_shape) -> TensorStore: ...
    def save(self, path: str) -> TensorInfo: ...
    def tensor(self, *args, **kwargs) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    @property
    def metadata(self) -> TensorInfo: ...
    @property
    def numel(self) -> int: ...
    @property
    def shape(self) -> Any: ...

def from_tensor(Tensor, path: str) -> TensorStore: ...
def gather_slices(*args, **kwargs) -> Any: ...
def gather_tensor_slices(*args, **kwargs) -> Any: ...
def get_io_threads() -> int: ...
def get_tmp_dir() -> str: ...
def good_partition(CSRStore: CSRStore, psize: int) -> NodePartitions: ...
def node_partitions(psize: int, assignments) -> NodePartitions: ...
def options(path: str = ...) -> TensorInfo: ...
def partition_coo_1d(COOStore: COOStore, partition: NodePartitions) -> BCOOStore: ...
def partition_coo_2d(COOStore: COOStore, partition: NodePartitions) -> BCOOStore: ...
def partition_csr_2d(COOStore: CSRStore, partition: NodePartitions) -> BCOOStore: ...
@overload
def random_partition(CSRStore: CSRStore, psize: int) -> NodePartitions: ...
@overload
def random_partition(COOStore: COOStore, psize: int) -> NodePartitions: ...
def set_io_threads(threads: int) -> None: ...
def set_tmp_dir(dir: str) -> None: ...
def shuffle_store(*args, **kwargs) -> Any: ...
def tensor_store(TensorInfo: TensorInfo, flags: str = ..., temp: bool = ...) -> TensorStore: ...
def verbose() -> None: ...
